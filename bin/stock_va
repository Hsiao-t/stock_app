#!/usr/bin/py
# from IPython.core.interactiveshell import InteractiveShell
# InteractiveShell.ast_node_interactivity = "all"

from time import sleep
from io import StringIO
import sys, time



class ProgressBar:
    def __init__(self, count = 0, total = 0, width = 50):
        self.count = count
        self.total = total
        self.width = width
    def move(self):
        self.count += 1
    def log(self, s):
        sys.stdout.write(' ' * (self.width + 9) + '\r')
        sys.stdout.flush()
        progress = int(self.width * self.count / self.total)
        sys.stdout.write('{0:3}/{1:3}: '.format(self.count, self.total))
        sys.stdout.write('>' * progress + '-' * (self.width - progress) + '\r')
        if progress == self.width:
            sys.stdout.write('\n')
        sys.stdout.flush()


def valuations():
    line='code,name,price,pe_ttm,mktcap,pb,pctchg,turnover\n'
    headers={
        "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",
        "Connection":"keep-alive",
        "Host":    "qt.gtimg.cn",
        "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36",
        "Referer":"http://stock.qq.com/data/"
    }
    codes = tsu.get_stock_basics().index
    bar = ProgressBar(total=len(codes))
    for code in codes:
        code = code[:6] if len(code)>=6 else '0'*6-len(code)
        r_url = 'http://qt.gtimg.cn/r={}q=sz'+code if code[0]!='6' else 'http://qt.gtimg.cn/r={}q=sh'+code
        import random
        r_url = r_url.format(random.random())
        try:
            ct_arr = ro.get(r_url,headers=headers,timeout=5).text.split('~')
            line = line + str(ct_arr[2]) + ',' + ct_arr[1] + ',' + ct_arr[3] + ',' + ct_arr[39] + ',' + ct_arr[45] + ',' + ct_arr[46] + ',' + ct_arr[32] + ','+ ct_arr[38] + '\n'
            sleep(0.1)
            bar.move()
            bar.log('')
        except:
            sleep(2)
            ct_arr = ro.get(r_url,headers=headers,timeout=20).text.split('~')
            line = line + str(ct_arr[2]) + ',' + ct_arr[1] + ',' + ct_arr[3] + ',' + ct_arr[39] + ',' + ct_arr[45] + ',' + ct_arr[46] + ',' + ct_arr[32] + ','+ ct_arr[38] + '\n'
            continue
    return line

if __name__ == '__main__':

    import os

    wd = os.path.split(os.path.realpath(__file__))[0]
    os.chdir(wd)

    sys.path.append('../')

    from modules import *

    conf = load_cfg("../conf/conf.json")
    db = conf['db_engine']
    __log__ = conf['log'].format(prog='running',ts='all')

    dt = datetime.strftime(datetime.now(),'%Y-%m-%d')
    mkt_open = tsu.trade_cal().query('calendarDate=="{}"'.format(dt))['isOpen'].values[0]
    if not mkt_open:
        print("{},沪深两市不开市,退出...".format(dt))
        logg(__log__,"{},不开市，退出...".format(dt))
        exit(0)
    print("正在下载两市估值数据...")
    logg(__log__,'正在下载两市估值数据...')
    t0 = datetime.now()
    data = valuations()
    t1 = datetime.now()
    s=StringIO(data)
    df=read_csv(s)
    cn = create_engine(db)
    df.to_sql('_tbl_va',cn,if_exists='append',index=0)
    dt = (t1-t0).total_seconds()

# 以下代码将数据同时存入老数据库

    cn = create_engine('postgresql://dbo:dbo@localhost/stockdb')
    df.to_sql('tbl_va',cn,if_exists='append',index=0)
    rs=cn.connect().execute("refresh materialized view s_va;")
    rs.close()
    rs=cn.connect().execute("refresh materialized view s_c_va;")
    rs.close()

    print('{d} 记录下载完成，{s}秒!'.format(d=len(df),s=dt))
    logg(__log__,'{d}记录下载完成,{s}秒!'.format(d=len(df),s=dt))

